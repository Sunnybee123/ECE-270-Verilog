module ha( input logic a,b,
            output logic s,co);
            
assign s = a ^ b;
assign co = a & b;
endmodule

module faha( input logic a,b,ci,
                output logic s,co 
                );
wire t,k,c;

ha v1(a,b,t,c);
ha v2(t,ci,s,k);
or (co,k,c);
endmodule

module fa(input logic a, input logic b, input logic ci, output logic s,
output logic co);

always @(a or b or ci)
begin

s = a ^ b ^ ci;
co = a & b | (a ^ b) & ci;
end

endmodule

module fa4( input logic [3:0] a,b,
            input logic ci,
            output logic [3:0] s,
            output logic co
            );
wire c1,c2,c3;

fa add1(.a(a[0]),.b(b[0]),.ci(ci),.s(s[0]),.co(c1));
fa add2(.a(a[1]),.b(b[1]),.ci(c1),.s(s[1]),.co(c2));
fa add3(.a(a[2]),.b(b[2]),.ci(c2),.s(s[2]),.co(c3));
fa add4(.a(a[3]),.b(b[3]),.ci(c3),.s(s[3]),.co(co));

endmodule

module bcdadd1( input logic [3:0] a,b,
                input logic ci,
                output logic [3:0] s,
                output logic co
                );

wire [1:0] connectors;
wire [3:0] sumb;
wire cob;
wire co2;

fa4 bc1(.a(a[3:0]), .b(b[3:0]), .ci(ci), .s(sumb[3:0]), .co(co2));
fa4 bc2(.a({1'b0,co,co,1'b0}), .b(sumb[3:0]), .ci(1'b0), .s(s[3:0]), .co(cob));

assign connectors[0] = sumb[3] & sumb[2];
assign connectors[1] = sumb[3] & sumb[1];
assign co = connectors[1] | connectors[0] | co2;


endmodule

module bcdadd4( input logic [15:0] a, b,
                input logic ci,
                output logic [15:0] s,
                output logic co
                );

logic co1, co2, co3;
bcdadd1 bcd1(.a(a[3:0]), .b(b[3:0]), .ci(ci), .co(co1),.s(s[3:0]));
bcdadd1 bcd2(.a(a[7:4]), .b(b[7:4]), .ci(co1), .co(co2),.s(s[7:4]));
bcdadd1 bcd3(.a(a[11:8]), .b(b[11:8]), .ci(co2), .co(co3),.s(s[11:8]));
bcdadd1 bcd4(.a(a[15:12]), .b(b[15:12]), .ci(co3), .co(co),.s(s[15:12]));

endmodule

module bcd9comp1( input logic [3:0] in,
                  output logic [3:0] out
                  );
always_comb
begin
case(in[3:0])
   4'd0: out = 4'd9;
   4'd1: out = 4'd8;
   4'd2: out = 4'd7;
   4'd3: out = 4'd6;
   4'd4: out = 4'd5;
   4'd5: out = 4'd4;
   4'd6: out = 4'd3;
   4'd7: out = 4'd2;
   4'd8: out = 4'd1;
   4'd9: out = 4'd0;
   default:out = 4'd0;
endcase
end

endmodule

module bcdaddsub4(input logic [15:0] a,b,
                  input logic op,
                  output logic [15:0] s
                  );
logic [15:0] comp;
logic [15:0] res;

bcd9comp1 cp1(b[3:0],comp[3:0]);
bcd9comp1 cp2(b[7:4],comp[7:4]);
bcd9comp1 cp3(b[11:8],comp[11:8]);
bcd9comp1 cp4(b[15:12],comp[15:12]);

assign res[15:0] = (op == 0 ? b[15:0] : comp[15:0]);

bcdadd4 add1(.a(a[15:0]),.b(res[15:0]),.ci(op), .s(s));
endmodule
