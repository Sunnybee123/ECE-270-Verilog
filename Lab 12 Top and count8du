module top (
  // I/O ports
  input  hz100, reset,
  input  [20:0] pb,
  output [7:0] left, right,
         ss7, ss6, ss5, ss4, ss3, ss2, ss1, ss0,
  output red, green, blue,

  // UART ports
  output [7:0] txdata,
  input  [7:0] rxdata,
  output txclk, rxclk,
  input  txready, rxready
);
logic flash;
logic hz1;
logic [7:0] ctr;

always_ff @(posedge hz100, posedge reset)
begin
  if(reset == 1)
    hz1 <= 1'b0;
  else
    hz1 <= ctr == 8'd49;
end

always_ff @(posedge hz1, posedge reset)
begin
  if(reset == 1)
    flash <= 1'b0;
  else
    flash <= ~flash;
end
//assign blue = flash;
hangman hg (.hz100(hz100), .reset(pb[19]), .hex(pb[15:10]), .ctrdisp(ss7[6:0]), .letterdisp({ss3[6:0], ss2[6:0], ss1[6:0], ss0[6:0]}), .win(green), .lose(red), .flash(flash)); 
count8du c8_1(.clk(hz100), .rst(reset), .enable(1'b1), .out(ctr[7:0]), .DIR(1'b0), .MAX(8'd49));
  
endmodule

module count8du(input logic clk, input logic rst, input logic enable, input logic DIR, input logic [7:0] MAX, output logic [7:0] out);

logic [7:0] Q;
logic [7:0] next_Q;
assign out = Q;

always_ff @(posedge clk, posedge rst) 
begin
  if(rst == 1) 
    Q <= 0;
  else if (enable == 1) 
    Q <= next_Q;
  
end

always_comb begin 
  if (DIR == 0)
    if (Q == 8'd0)
    next_Q = MAX;
    else 
    next_Q = Q - 1'b1;
  else 
    if (Q == MAX)
    next_Q = 8'd0;
    else
    next_Q = Q + 1'b1;
  end

endmodule

module ssdec(
  input logic[3:0] in,
  output logic [6:0] out,
  input logic enable
  );
  
  logic [6:0] light[15:0];
  
  assign light[4'h0] = 7'b0111111;
  assign light[4'h1] = 7'b0000110;
  assign light[4'h2] = 7'b1011011;
  assign light[4'h3] = 7'b1001111;
  assign light[4'h4] = 7'b1100110;
  assign light[4'h5] = 7'b1101101;
  assign light[4'h6] = 7'b1111101;
  assign light[4'h7] = 7'b0000111;
  assign light[4'h8] = 7'b1111111;
  assign light[4'h9] = 7'b1100111;
  assign light[4'ha] = 7'b1110111;
  assign light[4'hb] = 7'b1111100;
  assign light[4'hc] = 7'b0111001;
  assign light[4'hd] = 7'b1011110;
  assign light[4'he] = 7'b1111001;
  assign light[4'hf] = 7'b1110001;
  
  
  assign out = enable ? light[in]:0;
  
  endmodule
